generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("PINK_PRISMA_URL") // uses connection pooling
  directUrl = env("PINK_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          Int      @id @default(autoincrement())
  telegramId  String   @unique  // User ID from Telegram
  username    String?  // Telegram Username (can be null if not set)
  ipAddress   String?  // User's IP Address for anti-cheating
  coins       Int      @default(0)
  diamonds    Int      @default(0)  // Pink Star Diamonds collected
  referrerId  Int?     // Referral data (who invited whom)
  referrer    User?    @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals   User[]   @relation("UserReferrals")
  tasks       Task[]   // Tasks tracking for the user
  gameHistory GameHistory[] // Store game-related actions
  createdAt   DateTime @default(now())
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String   // Task description
  completed Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model GameHistory {
  id        Int      @id @default(autoincrement())
  action    String   // Describes action ("mine", "sell", etc.)
  amount    Int      // Amount of mined or sold items
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model device_logs {
    id          Int      @id @default(autoincrement())
    user_agent  String
    access_time DateTime @default(now())
}

model desktop_access_logs {
    id          Int      @id @default(autoincrement())
    user_agent  String
    access_time DateTime @default(now())
}
